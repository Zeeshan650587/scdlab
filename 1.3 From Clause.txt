-- SQL File: from_clause_queries.sql

-- Definition:
-- The FROM clause is a fundamental part of the SELECT statement.
-- It specifies the table or tables from which to retrieve data.
-- The FROM clause can be used with various joins, subqueries, and aggregations.

-- Basic FROM clause usage
SELECT * FROM employees; -- Retrieves all columns from the employees table

-- Specifying columns from a single table
SELECT first_name, last_name FROM employees; -- Retrieves only specific columns from employees table

-- Using FROM with WHERE clause for filtering
SELECT * FROM employees WHERE department_id = 1; -- Retrieves employees in IT department

-- Using FROM with ORDER BY to sort results
SELECT first_name, last_name FROM employees ORDER BY last_name ASC; -- Sorts employees alphabetically by last name

-- Using FROM with GROUP BY for aggregation
SELECT department_id, COUNT(*) FROM employees GROUP BY department_id; -- Counts employees in each department

-- Using FROM with JOINs to retrieve data from multiple tables
SELECT employees.first_name, employees.last_name, departments.department_name 
FROM employees
INNER JOIN departments ON employees.department_id = departments.department_id; -- Retrieves employees with department names

-- Using FROM with LEFT JOIN to include unmatched records from the left table
SELECT employees.first_name, employees.last_name, departments.department_name 
FROM employees
LEFT JOIN departments ON employees.department_id = departments.department_id; -- Includes employees without a department

-- Using FROM with RIGHT JOIN to include unmatched records from the right table
SELECT employees.first_name, employees.last_name, departments.department_name 
FROM employees
RIGHT JOIN departments ON employees.department_id = departments.department_id; -- Includes departments with no employees

-- Using FROM with FULL JOIN to include all records from both tables
SELECT employees.first_name, employees.last_name, departments.department_name 
FROM employees
FULL JOIN departments ON employees.department_id = departments.department_id; -- Includes all employees and all departments

-- Using FROM with UNION to combine results from multiple tables
SELECT first_name FROM employees
UNION
SELECT first_name FROM clients; -- Combines employee and client first names without duplicates

-- Using FROM with UNION ALL to include duplicates
SELECT first_name FROM employees
UNION ALL
SELECT first_name FROM clients; -- Combines employee and client first names including duplicates

-- Using FROM with subqueries
SELECT first_name, last_name FROM employees
WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'HR'); -- Retrieves employees in HR

-- Using FROM with CASE for conditional selection
SELECT first_name, last_name, 
CASE 
    WHEN salary > 70000 THEN 'High Salary'
    WHEN salary BETWEEN 40000 AND 70000 THEN 'Medium Salary'
    ELSE 'Low Salary'
END AS salary_category
FROM employees; -- Assigns salary categories to employees

-- FROM with multiple tables in a CROSS JOIN (Cartesian product)
SELECT employees.first_name, employees.last_name, clients.first_name AS client_first_name, clients.last_name AS client_last_name
FROM employees, clients; -- Matches each employee with every client
