-- SQL File: sql_clauses_queries.sql

-- Definition:
-- SQL clauses define how data is retrieved, filtered, grouped, and ordered in queries.
-- The main SQL clauses include SELECT, FROM, WHERE, GROUP BY, HAVING, ORDER BY, JOIN, UNION, LIMIT, and OFFSET.

-- SELECT Clause: Retrieves specific columns from a table
SELECT first_name, last_name FROM employees; -- Retrieves first and last names of employees

-- FROM Clause: Specifies the table from which data is retrieved
SELECT * FROM employees; -- Retrieves all columns from the employees table

-- WHERE Clause: Filters records based on a condition
SELECT * FROM employees WHERE department_id = 1; -- Retrieves employees in department 1

-- GROUP BY Clause: Groups data based on one or more columns
SELECT department_id, COUNT(*) FROM employees GROUP BY department_id; -- Counts employees per department

-- HAVING Clause: Filters grouped results based on an aggregate function
SELECT department_id, COUNT(*) FROM employees GROUP BY department_id HAVING COUNT(*) > 5; -- Departments with more than 5 employees

-- ORDER BY Clause: Sorts the result set in ascending or descending order
SELECT first_name, last_name FROM employees ORDER BY last_name ASC; -- Orders employees by last name
SELECT first_name, last_name, salary FROM employees ORDER BY salary DESC; -- Orders employees by salary in descending order

-- Using ORDER BY with multiple columns
SELECT first_name, last_name, department_id FROM employees ORDER BY department_id ASC, last_name DESC; -- Orders by department first, then last name in descending order

-- JOIN Clause: Combines rows from multiple tables based on a related column
SELECT employees.first_name, employees.last_name, departments.department_name 
FROM employees
INNER JOIN departments ON employees.department_id = departments.department_id; -- Joins employees and departments tables

-- LEFT JOIN: Retrieves all records from the left table and matched records from the right table
SELECT employees.first_name, employees.last_name, departments.department_name 
FROM employees
LEFT JOIN departments ON employees.department_id = departments.department_id; -- Includes employees without a department

-- RIGHT JOIN: Retrieves all records from the right table and matched records from the left table
SELECT employees.first_name, employees.last_name, departments.department_name 
FROM employees
RIGHT JOIN departments ON employees.department_id = departments.department_id; -- Includes departments with no employees

-- FULL JOIN: Includes all records from both tables
SELECT employees.first_name, employees.last_name, departments.department_name 
FROM employees
FULL JOIN departments ON employees.department_id = departments.department_id; -- Includes all employees and all departments

-- UNION Clause: Combines the results of multiple queries without duplicates
SELECT first_name FROM employees
UNION
SELECT first_name FROM clients; -- Combines employee and client first names without duplicates

-- UNION ALL: Includes duplicates when combining multiple result sets
SELECT first_name FROM employees
UNION ALL
SELECT first_name FROM clients; -- Includes duplicate names from employees and clients

-- LIMIT Clause: Restricts the number of rows returned
SELECT * FROM employees LIMIT 5; -- Retrieves only the first 5 employees

-- Using LIMIT with ORDER BY
SELECT first_name, last_name, salary FROM employees ORDER BY salary DESC LIMIT 3; -- Retrieves the top 3 highest-paid employees

-- OFFSET Clause: Skips a specified number of rows before retrieving results
SELECT * FROM employees LIMIT 5 OFFSET 10; -- Skips the first 10 rows and retrieves the next 5 employees

-- Using WHERE with a subquery
SELECT * FROM employees WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'HR'); -- Retrieves employees in HR

-- Using CASE with SQL clauses
SELECT first_name, last_name, 
CASE 
    WHEN salary > 70000 THEN 'High Salary'
    WHEN salary BETWEEN 40000 AND 70000 THEN 'Medium Salary'
    ELSE 'Low Salary'
END AS salary_category
FROM employees; -- Categorizes employees based on salary ranges

-- CROSS JOIN: Cartesian product of two tables
SELECT employees.first_name, clients.first_name AS client_name 
FROM employees, clients; -- Matches every employee with every client
